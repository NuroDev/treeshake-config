import { join, parse } from "path";
import { loadConfig } from "unconfig";

/**
 * Generate Config's
 *
 * Loads a single config file & maps all exported variables to a new record with the following format
 * `[EXPORT_NAME].config.js`: `module.exports = [EXPORT_DATA]`
 *
 * @param {String} path - Path to the input config file excluding the file extension. (Default: './config')
 */
export async function generateConfigs(
  path: string = join(__dirname, "config")
): Promise<Array<Array<string>>> {
  const parsedPath = parse(path);

  const { config } = await loadConfig({
    sources: [
      {
        files: parsedPath.ext ? path.replaceAll(parsedPath.ext, "") : path,
        extensions: ["ts", "mts", "cts", "js", "mjs", "cjs", "json"],
      },
    ],
    merge: false,
  });

  return Object.entries(config as Record<string, object>).map(
    ([key, value]) => [
      `${key}.config.js`,
      `/**
* Warning! This file is autogenerated. Do not edit this file directly.
*/
module.exports = ${JSON.stringify(value, null, 4)}\n`,
    ]
  );
}
